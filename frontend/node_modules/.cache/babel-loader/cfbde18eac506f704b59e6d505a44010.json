{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Aryan Chawla\\\\QWEB\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Aryan Chawla\\\\QWEB\\\\frontend\\\\src\\\\pages\\\\App.js\";\n\n//Todo:\n//Have tile sliding be continuous instead of one move at a time\n//Add Rest of pages\n//Add Timer\nimport React, { useState } from 'react';\nimport '../styles/App.css';\nimport Board from '../components/Board';\nimport helpers from '../helpers';\n\nvar App = function App() {\n  var boardWidth = 500;\n\n  var _useState = useState(3),\n      _useState2 = _slicedToArray(_useState, 2),\n      width = _useState2[0],\n      setWidth = _useState2[1]; //width in tiles\n\n\n  var _useState3 = useState(function () {\n    return helpers.initTiles(width);\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tiles = _useState4[0],\n      setTiles = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      completedBoard = _useState6[0],\n      setCompletedBoard = _useState6[1];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"topbar\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return helpers.decWidth(width, setWidth, setTiles, setCompletedBoard);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, \"-\"), \"  \\u2002\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"gradtext\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, \"Board Size\"), \"  \\u2002\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return helpers.incWidth(width, setWidth, setTiles, setCompletedBoard);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, \"+\"), \"\\u2003\\u2003\\u2003\\u2003\\u2003\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"App-startBtn\",\n    className: \"button1\",\n    onClick: function onClick() {\n      return helpers.shuffleTiles(width, setCompletedBoard, setTiles);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \"Start\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"App-board\",\n    className: \"board\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    width: width,\n    tiles: tiles,\n    boardWidth: boardWidth,\n    completedBoard: completedBoard,\n    setCompletedBoard: setCompletedBoard,\n    setTiles: setTiles,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App; //console.log(JSON.parse(JSON.stringify(object)))","map":{"version":3,"sources":["C:/Users/Aryan Chawla/QWEB/frontend/src/pages/App.js"],"names":["React","useState","Board","helpers","App","boardWidth","width","setWidth","initTiles","tiles","setTiles","completedBoard","setCompletedBoard","decWidth","incWidth","shuffleTiles"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAChB,MAAMC,UAAU,GAAG,GAAnB;;AADgB,kBAEUJ,QAAQ,CAAC,CAAD,CAFlB;AAAA;AAAA,MAETK,KAFS;AAAA,MAEFC,QAFE,kBAEsB;;;AAFtB,mBAGUN,QAAQ,CAAC;AAAA,WAAME,OAAO,CAACK,SAAR,CAAkBF,KAAlB,CAAN;AAAA,GAAD,CAHlB;AAAA;AAAA,MAGTG,KAHS;AAAA,MAGFC,QAHE;;AAAA,mBAI4BT,QAAQ,CAAC,EAAD,CAJpC;AAAA;AAAA,MAITU,cAJS;AAAA,MAIOC,iBAJP;;AAMhB,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMT,OAAO,CAACU,QAAR,CAAiBP,KAAjB,EAAwBC,QAAxB,EAAkCG,QAAlC,EAA4CE,iBAA5C,CAAN;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,2BAEE;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,2BAGE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMT,OAAO,CAACW,QAAR,CAAiBR,KAAjB,EAAwBC,QAAxB,EAAkCG,QAAlC,EAA4CE,iBAA5C,CAAN;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHF,mCADF,eAOE;AAAQ,IAAA,EAAE,EAAC,cAAX;AAA0B,IAAA,SAAS,EAAC,SAApC;AAA8C,IAAA,OAAO,EAAE;AAAA,aAAMT,OAAO,CAACY,YAAR,CAAqBT,KAArB,EAA4BM,iBAA5B,EAA+CF,QAA/C,CAAN;AAAA,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAPF,eAQE;AAAK,IAAA,EAAE,EAAC,WAAR;AAAoB,IAAA,SAAS,EAAC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEJ,KAAd;AAAqB,IAAA,KAAK,EAAEG,KAA5B;AAAmC,IAAA,UAAU,EAAEJ,UAA/C;AAA2D,IAAA,cAAc,EAAEM,cAA3E;AACA,IAAA,iBAAiB,EAAEC,iBADnB;AACsC,IAAA,QAAQ,EAAEF,QADhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CARF,CADF;AAeD,CArBD;;AAuBA,eAAeN,GAAf,C,CAGA","sourcesContent":["//Todo:\r\n//Have tile sliding be continuous instead of one move at a time\r\n//Add Rest of pages\r\n//Add Timer\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport '../styles/App.css';\r\nimport Board from '../components/Board';\r\nimport helpers from '../helpers';\r\n\r\nconst App = () => {\r\n  const boardWidth = 500\r\n  const [width, setWidth] = useState(3) //width in tiles\r\n  const [tiles, setTiles] = useState(() => helpers.initTiles(width))\r\n  const [completedBoard, setCompletedBoard] = useState([])\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"topbar\">\r\n        <button onClick={() => helpers.decWidth(width, setWidth, setTiles, setCompletedBoard)}>-</button>  &ensp;\r\n        <span className=\"gradtext\">Board Size</span>  &ensp;\r\n        <button onClick={() => helpers.incWidth(width, setWidth, setTiles, setCompletedBoard)}>+</button>\r\n        &emsp;&emsp;&emsp;&emsp;&emsp;\r\n      </div>\r\n      <button id=\"App-startBtn\" className=\"button1\" onClick={() => helpers.shuffleTiles(width, setCompletedBoard, setTiles)}>Start</button>\r\n      <div id=\"App-board\" className=\"board\">\r\n        <Board width={width} tiles={tiles} boardWidth={boardWidth} completedBoard={completedBoard} \r\n        setCompletedBoard={setCompletedBoard} setTiles={setTiles}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n//console.log(JSON.parse(JSON.stringify(object)))"]},"metadata":{},"sourceType":"module"}