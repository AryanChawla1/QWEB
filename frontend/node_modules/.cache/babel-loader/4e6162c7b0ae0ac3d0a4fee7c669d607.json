{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Aryan Chawla\\\\QWEB\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Aryan Chawla\\\\QWEB\\\\frontend\\\\src\\\\components\\\\Tiles.js\";\n\nimport { useState } from 'react';\nimport React from 'react';\nimport Tile from './Tile';\nimport helpers from '../helpers';\n\nvar Tiles = function Tiles(_ref) {\n  var width = _ref.width,\n      tiles = _ref.tiles,\n      boardWidth = _ref.boardWidth,\n      moveRow = _ref.moveRow,\n      moveCol = _ref.moveCol,\n      completedBoard = _ref.completedBoard,\n      setCompletedBoard = _ref.setCompletedBoard,\n      setTiles = _ref.setTiles,\n      nonFunctional = _ref.nonFunctional;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      heldTile = _useState2[0],\n      setHeldTile = _useState2[1];\n\n  var tileHeld = function tileHeld(t) {\n    if (nonFunctional) return;\n    setHeldTile(t);\n  };\n\n  var tileReleased = function tileReleased(t) {\n    if (nonFunctional) return;\n    setHeldTile(null);\n  };\n\n  var tileMovedOnto = function tileMovedOnto(t) {\n    if (nonFunctional) return;\n\n    if (heldTile != null) {\n      if (heldTile.row < t.row) {\n        helpers.moveCol(width, tiles, t.col, 1);\n      } else if (heldTile.row > t.row) {\n        setTiles(helpers.moveCol(width, tiles, t.col, -1));\n      } else if (heldTile.col < t.col) {\n        setTiles(helpers.moveRow(width, tiles, t.row, 1));\n      } else if (heldTile.col > t.col) {\n        setTiles(helpers.moveRow(width, tiles, t.row, -1));\n      } else {\n        console.log(\"[!] Error in Tiles/tileMovedOnto\");\n      }\n\n      helpers.checkIfComplete(tiles, completedBoard, setCompletedBoard);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, tiles.map(function (tile) {\n    return /*#__PURE__*/React.createElement(Tile, {\n      key: tile.text,\n      tiles: tiles,\n      width: width,\n      tile: tile,\n      boardWidth: boardWidth,\n      tileHeld: tileHeld,\n      tileReleased: tileReleased,\n      tileMovedOnto: tileMovedOnto,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    });\n  }));\n};\n\nexport default Tiles;","map":{"version":3,"sources":["C:/Users/Aryan Chawla/QWEB/frontend/src/components/Tiles.js"],"names":["useState","React","Tile","helpers","Tiles","width","tiles","boardWidth","moveRow","moveCol","completedBoard","setCompletedBoard","setTiles","nonFunctional","heldTile","setHeldTile","tileHeld","t","tileReleased","tileMovedOnto","row","col","console","log","checkIfComplete","map","tile","text"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\nimport React from 'react'\r\nimport Tile from './Tile'\r\nimport helpers from '../helpers'\r\n\r\nconst Tiles = ({ width, tiles, boardWidth, moveRow, moveCol, completedBoard, setCompletedBoard, setTiles, nonFunctional}) => {\r\n  const [heldTile, setHeldTile] = useState(null)\r\n\r\n  const tileHeld = (t) => {\r\n    if (nonFunctional) return;\r\n    setHeldTile(t)\r\n  }\r\n  const tileReleased = (t) => {\r\n    if (nonFunctional) return;\r\n    setHeldTile(null)\r\n  }\r\n\r\n  const tileMovedOnto = (t) => {\r\n    if (nonFunctional) return;\r\n    if (heldTile != null) {\r\n      if (heldTile.row < t.row) { helpers.moveCol(width, tiles, t.col, 1) }\r\n      else if (heldTile.row > t.row) { setTiles(helpers.moveCol(width, tiles, t.col, -1)) }\r\n      else if (heldTile.col < t.col) { setTiles(helpers.moveRow(width, tiles, t.row, 1)) }\r\n      else if (heldTile.col > t.col) { setTiles(helpers.moveRow(width, tiles, t.row, -1)) }\r\n      else { console.log(\"[!] Error in Tiles/tileMovedOnto\") }\r\n      helpers.checkIfComplete(tiles, completedBoard, setCompletedBoard)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {tiles.map((tile) => (\r\n        <Tile key={tile.text} tiles={tiles} width={width} tile={tile} boardWidth={boardWidth}\r\n          tileHeld={tileHeld} tileReleased={tileReleased}\r\n          tileMovedOnto={tileMovedOnto} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tiles"]},"metadata":{},"sourceType":"module"}