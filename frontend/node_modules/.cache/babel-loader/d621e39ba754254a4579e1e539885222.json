{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Aryan Chawla\\\\QWEB\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Aryan Chawla\\\\QWEB\\\\frontend\\\\src\\\\pages\\\\App.js\";\n\n//Todo:\n//Move Board functions to Board.js\n//Have tile sliding be continuous instead of one move at a time\nimport Main from '../Main';\nimport React, { useState } from 'react';\nimport '../styles/App.css';\nimport Board from '../components/Board';\nimport helpers from '../helpers';\n\nvar App = function App() {\n  var boardWidth = 500;\n\n  var _useState = useState(3),\n      _useState2 = _slicedToArray(_useState, 2),\n      width = _useState2[0],\n      setWidth = _useState2[1]; //width in tiles\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      completedBoard = _useState4[0],\n      setCompletedBoard = _useState4[1];\n\n  var initTiles = function initTiles(w) {\n    var newTiles = [];\n\n    for (var i = 0; i < Math.pow(w, 2); i++) {\n      newTiles.push({\n        id: i + 1,\n        row: Math.floor(i / w),\n        // Position in array\n        col: i % w\n      });\n    }\n\n    for (var _i = 0; _i < Math.pow(w, 2); _i++) {\n      if (w <= 5) {\n        newTiles[_i].text = String.fromCharCode(65 + _i);\n      } else {\n        newTiles[_i].text = _i + 1;\n      }\n    }\n\n    return newTiles;\n  };\n\n  var _useState5 = useState(function () {\n    return initTiles(width);\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tiles = _useState6[0],\n      setTiles = _useState6[1];\n\n  var incWidth = function incWidth() {\n    if (width < 10) {\n      width += 1;\n      setWidth(width);\n      setTiles(initTiles(width));\n      setCompletedBoard([]);\n    }\n  };\n\n  var decWidth = function decWidth() {\n    if (width > 3) {\n      width -= 1;\n      setWidth(width);\n      setTiles(initTiles(width));\n      setCompletedBoard([]);\n    }\n  };\n\n  var moveRow = function moveRow(tiles, row, dir) {\n    //dir 1 = move row right, -1 = move row left\n    var rowTiles = [];\n    var rowTiles0 = [];\n\n    for (var i = 0; i < tiles.length; i++) {\n      if (tiles[i].row === row) {\n        rowTiles.push(JSON.parse(JSON.stringify(tiles[i])));\n        rowTiles0.push(JSON.parse(JSON.stringify(tiles[i])));\n      }\n    }\n\n    for (var _i2 = 0; _i2 < rowTiles0.length; _i2++) {\n      rowTiles[((_i2 - dir) % rowTiles0.length + rowTiles0.length) % rowTiles0.length].col = rowTiles0[_i2].col;\n      tiles.splice(rowTiles0[_i2].row * width + rowTiles0[_i2].col, 1, rowTiles[((_i2 - dir) % rowTiles.length + rowTiles.length) % rowTiles.length]);\n    }\n\n    return JSON.parse(JSON.stringify(tiles));\n  };\n\n  var moveCol = function moveCol(tiles, col, dir) {\n    var colTiles = [];\n    var colTiles0 = [];\n\n    for (var i = 0; i < tiles.length; i++) {\n      if (tiles[i].col === col) {\n        colTiles.push(JSON.parse(JSON.stringify(tiles[i])));\n        colTiles0.push(JSON.parse(JSON.stringify(tiles[i])));\n      }\n    }\n\n    for (var _i3 = 0; _i3 < colTiles0.length; _i3++) {\n      colTiles[((_i3 - dir) % colTiles0.length + colTiles0.length) % colTiles0.length].row = colTiles0[_i3].row;\n      tiles.splice(colTiles0[_i3].row * width + colTiles0[_i3].col, 1, colTiles[((_i3 - dir) % colTiles.length + colTiles.length) % colTiles.length]);\n    }\n\n    return JSON.parse(JSON.stringify(tiles));\n  };\n\n  var shuffleTiles = function shuffleTiles(w) {\n    var newTiles = initTiles(w);\n\n    for (var i = 0; i < 75; i++) {\n      newTiles = moveRow(newTiles, helpers.randInt(0, w - 1), helpers.randInt(0, 1));\n      newTiles = moveCol(newTiles, helpers.randInt(0, w - 1), helpers.randInt(0, 1));\n    }\n\n    setCompletedBoard(initTiles(w));\n    setTiles(newTiles);\n  };\n\n  var checkIfComplete = function checkIfComplete() {\n    if (JSON.stringify(tiles) === JSON.stringify(completedBoard)) {\n      setTimeout(function () {\n        alert(\"Well Done!\");\n      }, 260); //Activates too early if there isnt a delay\n\n      setCompletedBoard([]);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Main, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"topbar\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: decWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, \"-\"), \"  \\u2002\", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"gradtext\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Board Size\"), \"  \\u2002\", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: incWidth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"+\"), \"\\u2003\\u2003\\u2003\\u2003\\u2003\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"titleText\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, \"TORUS PUZZLE\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttonsMainPage\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button1\",\n    onClick: function onClick() {\n      return shuffleTiles(width);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"Shuffle\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, \"Button\")), /*#__PURE__*/React.createElement(Board, {\n    width: width,\n    tiles: tiles,\n    boardWidth: boardWidth,\n    moveRow: moveRow,\n    moveCol: moveCol,\n    checkIfComplete: checkIfComplete,\n    setTiles: setTiles,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App; //console.log(JSON.parse(JSON.stringify(object)))","map":{"version":3,"sources":["C:/Users/Aryan Chawla/QWEB/frontend/src/pages/App.js"],"names":["Main","React","useState","Board","helpers","App","boardWidth","width","setWidth","completedBoard","setCompletedBoard","initTiles","w","newTiles","i","push","id","row","Math","floor","col","text","String","fromCharCode","tiles","setTiles","incWidth","decWidth","moveRow","dir","rowTiles","rowTiles0","length","JSON","parse","stringify","splice","moveCol","colTiles","colTiles0","shuffleTiles","randInt","checkIfComplete","setTimeout","alert"],"mappings":"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","sourcesContent":["//Todo:\r\n//Move Board functions to Board.js\r\n//Have tile sliding be continuous instead of one move at a time\r\n\r\nimport Main from '../Main'\r\nimport React, { useState } from 'react';\r\nimport '../styles/App.css';\r\nimport Board from '../components/Board';\r\nimport helpers from '../helpers';\r\n\r\nconst App = () => {\r\n  const boardWidth = 500\r\n  let [width, setWidth] = useState(3) //width in tiles\r\n  let [completedBoard, setCompletedBoard] = useState([])\r\n\r\n  const initTiles = (w) => {\r\n    let newTiles = []\r\n    for (let i = 0; i < w ** 2; i++) {\r\n      newTiles.push(\r\n        {\r\n          id: i + 1,\r\n          row: Math.floor(i / w), // Position in array\r\n          col: i % w,\r\n        }\r\n      )\r\n    }\r\n    for (let i = 0; i < w ** 2; i++) {\r\n      if (w <= 5) {\r\n        newTiles[i].text = String.fromCharCode(65 + i)\r\n      }\r\n      else {\r\n        newTiles[i].text = i + 1\r\n      }\r\n    }\r\n    return newTiles\r\n  }\r\n\r\n  const [tiles, setTiles] = useState(() => initTiles(width))\r\n\r\n  const incWidth = () => {\r\n    if (width < 10) {\r\n      width += 1\r\n      setWidth(width)\r\n      setTiles(initTiles(width))\r\n      setCompletedBoard([])\r\n    }\r\n  }\r\n\r\n  const decWidth = () => {\r\n    if (width > 3) {\r\n      width -= 1\r\n      setWidth(width)\r\n      setTiles(initTiles(width))\r\n      setCompletedBoard([])\r\n    }\r\n  }\r\n\r\n  const moveRow = (tiles, row, dir) => { //dir 1 = move row right, -1 = move row left\r\n    let rowTiles = []\r\n    let rowTiles0 = []\r\n    for (let i = 0; i < tiles.length; i++) {\r\n      if (tiles[i].row === row) {\r\n        rowTiles.push(JSON.parse(JSON.stringify(tiles[i])))\r\n        rowTiles0.push(JSON.parse(JSON.stringify(tiles[i])))\r\n      }\r\n    }\r\n    for (let i = 0; i < rowTiles0.length; i++) {\r\n      rowTiles[(((i - dir) % rowTiles0.length) + rowTiles0.length) % rowTiles0.length].col = rowTiles0[i].col\r\n      tiles.splice(rowTiles0[i].row * width + rowTiles0[i].col, 1, rowTiles[(((i - dir) % rowTiles.length) + rowTiles.length) % rowTiles.length]);\r\n    }\r\n    return JSON.parse(JSON.stringify(tiles))\r\n  }\r\n\r\n  const moveCol = (tiles, col, dir) => {\r\n    let colTiles = []\r\n    let colTiles0 = []\r\n    for (let i = 0; i < tiles.length; i++) {\r\n      if (tiles[i].col === col) {\r\n        colTiles.push(JSON.parse(JSON.stringify(tiles[i])))\r\n        colTiles0.push(JSON.parse(JSON.stringify(tiles[i])))\r\n      }\r\n    }\r\n    for (let i = 0; i < colTiles0.length; i++) {\r\n      colTiles[(((i - dir) % colTiles0.length) + colTiles0.length) % colTiles0.length].row = colTiles0[i].row\r\n      tiles.splice(colTiles0[i].row * width + colTiles0[i].col, 1, colTiles[(((i - dir) % colTiles.length) + colTiles.length) % colTiles.length]);\r\n    }\r\n    return JSON.parse(JSON.stringify(tiles))\r\n  }\r\n\r\n  const shuffleTiles = (w) => {\r\n    let newTiles = initTiles(w)\r\n    for (let i = 0; i < 75; i++) {\r\n      newTiles = moveRow(newTiles, helpers.randInt(0, w-1), helpers.randInt(0,1))\r\n      newTiles = moveCol(newTiles, helpers.randInt(0, w-1), helpers.randInt(0,1))\r\n    }\r\n\r\n    setCompletedBoard(initTiles(w))\r\n    setTiles(newTiles)\r\n  }\r\n\r\n  const checkIfComplete = () => {\r\n    if (JSON.stringify(tiles) === JSON.stringify(completedBoard)) {\r\n      setTimeout(function () { alert(\"Well Done!\") }, 260); //Activates too early if there isnt a delay\r\n      setCompletedBoard([])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Main />\r\n      <div className=\"topbar\">\r\n        <button onClick={decWidth}>-</button>  &ensp;\r\n        <span className=\"gradtext\">Board Size</span>  &ensp;\r\n        <button onClick={incWidth}>+</button>\r\n        &emsp;&emsp;&emsp;&emsp;&emsp;\r\n      </div>\r\n      <div className=\"titleText\">TORUS PUZZLE</div>\r\n      <div className=\"buttonsMainPage\">\r\n        <button className=\"button1\" onClick={() => shuffleTiles(width)}>Shuffle</button>\r\n        <button className=\"button1\">Button</button>\r\n      </div>\r\n      <Board width={width} tiles={tiles} boardWidth={boardWidth} moveRow={moveRow} moveCol={moveCol}\r\n        checkIfComplete={checkIfComplete} setTiles={setTiles} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n//console.log(JSON.parse(JSON.stringify(object)))"]},"metadata":{},"sourceType":"module"}