{"ast":null,"code":"var getTileFromId = function getTileFromId(id, tiles) {\n  for (var i = 0; i < tiles.length; i++) {\n    if (tiles[i].id === id) {\n      return tiles[i - 1];\n    }\n  }\n\n  console.log(\"[!] getTileFromId - no element found\");\n};\n\nvar packageTiles = function packageTiles(tiles, width) {\n  // Cleans up tiles array for use in the the backend (2D Array of ids)\n  var tileIds = tiles.map(function (tile) {\n    return tile.id;\n  });\n  var packagedTiles = [];\n\n  for (var row = 0; row < width; row++) {\n    packagedTiles.push([]);\n\n    for (var col = 0; col < width; col++) {\n      packagedTiles[row].push(tileIds[row * width + col]);\n    }\n  }\n\n  return packagedTiles;\n};\n\nvar getVisualPosition = function getVisualPosition(tile, tileWidth) {\n  return {\n    x: tile.col * tileWidth,\n    y: tile.row * tileWidth\n  };\n};\n\nvar randInt = function randInt(min, max) {\n  //Random integer from min to max (inclusive)\n  return Math.floor(Math.random() * (max + 1 - min)) + min;\n};\n\nexport default {\n  getTileFromId: getTileFromId,\n  packageTiles: packageTiles,\n  getVisualPosition: getVisualPosition,\n  randInt: randInt\n};","map":{"version":3,"sources":["C:/Users/Aryan Chawla/QWEB/frontend/src/helpers.js"],"names":["getTileFromId","id","tiles","i","length","console","log","packageTiles","width","tileIds","map","tile","packagedTiles","row","push","col","getVisualPosition","tileWidth","x","y","randInt","min","max","Math","floor","random"],"mappings":"AAAA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,EAAD,EAAKC,KAAL,EAAe;AACjC,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACD,KAAK,CAACE,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjC,QAAID,KAAK,CAACC,CAAD,CAAL,CAASF,EAAT,KAAgBA,EAApB,EAAwB;AACtB,aAAOC,KAAK,CAACC,CAAC,GAAC,CAAH,CAAZ;AACD;AACF;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACD,CAPH;;AAUA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACL,KAAD,EAAQM,KAAR,EAAkB;AACnC;AACA,MAAMC,OAAO,GAAGP,KAAK,CAACQ,GAAN,CAAU,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACV,EAAf;AAAA,GAAV,CAAhB;AACA,MAAIW,aAAa,GAAG,EAApB;;AACA,OAAK,IAAIC,GAAG,GAAC,CAAb,EAAgBA,GAAG,GAACL,KAApB,EAA2BK,GAAG,EAA9B,EAAkC;AAChCD,IAAAA,aAAa,CAACE,IAAd,CAAmB,EAAnB;;AACA,SAAK,IAAIC,GAAG,GAAC,CAAb,EAAgBA,GAAG,GAACP,KAApB,EAA2BO,GAAG,EAA9B,EAAkC;AAChCH,MAAAA,aAAa,CAACC,GAAD,CAAb,CAAmBC,IAAnB,CAAwBL,OAAO,CAACI,GAAG,GAACL,KAAJ,GAAYO,GAAb,CAA/B;AACD;AACF;;AACD,SAAOH,aAAP;AACD,CAXH;;AAaA,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,CAACL,IAAD,EAAOM,SAAP,EAAqB;AAC7C,SAAO;AACLC,IAAAA,CAAC,EAAEP,IAAI,CAACI,GAAL,GAAWE,SADT;AAELE,IAAAA,CAAC,EAAER,IAAI,CAACE,GAAL,GAAWI;AAFT,GAAP;AAID,CALD;;AAOA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC5B;AACD,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAG,CAAN,GAAUD,GAA3B,CAAX,IAA8CA,GAArD;AACA,CAHD;;AAMA,eAAe;AAACrB,EAAAA,aAAa,EAAbA,aAAD;AAAgBO,EAAAA,YAAY,EAAZA,YAAhB;AAA8BS,EAAAA,iBAAiB,EAAjBA,iBAA9B;AAAiDI,EAAAA,OAAO,EAAPA;AAAjD,CAAf","sourcesContent":["const getTileFromId = (id, tiles) => {\r\n    for (let i=0; i<tiles.length; i++) {\r\n      if (tiles[i].id === id) {\r\n        return tiles[i-1]\r\n      }\r\n    }\r\n    console.log(\"[!] getTileFromId - no element found\")\r\n  }\r\n\r\n\r\nconst packageTiles = (tiles, width) => {\r\n    // Cleans up tiles array for use in the the backend (2D Array of ids)\r\n    const tileIds = tiles.map((tile) => tile.id)\r\n    let packagedTiles = []\r\n    for (let row=0; row<width; row++) {\r\n      packagedTiles.push([])\r\n      for (let col=0; col<width; col++) {\r\n        packagedTiles[row].push(tileIds[row*width + col])\r\n      }\r\n    }\r\n    return packagedTiles\r\n  }\r\n\r\nconst getVisualPosition = (tile, tileWidth) => {\r\n  return {\r\n    x: tile.col * tileWidth,\r\n    y: tile.row * tileWidth\r\n  }\r\n}\r\n\r\nconst randInt = (min, max) => {\r\n  //Random integer from min to max (inclusive)\r\n\treturn Math.floor(Math.random() * (max + 1 - min)) + min;\r\n}\r\n\r\n\r\nexport default {getTileFromId, packageTiles, getVisualPosition, randInt}\r\n"]},"metadata":{},"sourceType":"module"}