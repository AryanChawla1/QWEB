{"ast":null,"code":"var getTileFromId = function getTileFromId(id, tiles) {\n  for (var i = 0; i < tiles.length; i++) {\n    if (tiles[i].id === id) {\n      return tiles[i - 1];\n    }\n  }\n\n  console.log(\"[!] getTileFromId - no element found\");\n};\n\nvar packageTiles = function packageTiles(tiles, width) {\n  // Cleans up tiles array for use in the the backend (2D Array of ids)\n  var tileIds = tiles.map(function (tile) {\n    return tile.id;\n  });\n  var packagedTiles = [];\n\n  for (var row = 0; row < width; row++) {\n    packagedTiles.push([]);\n\n    for (var col = 0; col < width; col++) {\n      packagedTiles[row].push(tileIds[row * width + col]);\n    }\n  }\n\n  return packagedTiles;\n};\n\nvar getVisualPosition = function getVisualPosition(tile, tileWidth) {\n  return {\n    x: tile.col * tileWidth,\n    y: tile.row * tileWidth\n  };\n};\n\nvar randInt = function randInt(min, max) {\n  //Random integer from min to max (inclusive)\n  return Math.floor(Math.random() * (max + 1 - min)) + min;\n};\n\nvar initTiles = function initTiles(w) {\n  var newTiles = [];\n\n  for (var i = 0; i < Math.pow(w, 2); i++) {\n    newTiles.push({\n      id: i + 1,\n      row: Math.floor(i / w),\n      // Position in array\n      col: i % w\n    });\n  }\n\n  for (var _i = 0; _i < Math.pow(w, 2); _i++) {\n    if (w <= 5) {\n      newTiles[_i].text = String.fromCharCode(65 + _i);\n    } else {\n      newTiles[_i].text = _i + 1;\n    }\n  }\n\n  return newTiles;\n};\n\nvar shuffleTiles = function shuffleTiles(w, setCompletedBoard, setTiles) {\n  var newTiles = initTiles(w);\n\n  for (var i = 0; i < 75; i++) {\n    newTiles = moveRow(w, newTiles, randInt(0, w - 1), randInt(0, 1));\n    newTiles = moveCol(w, newTiles, randInt(0, w - 1), randInt(0, 1));\n  }\n\n  setCompletedBoard(initTiles(w));\n  setTiles(newTiles);\n};\n\nvar checkIfComplete = function checkIfComplete(tiles, completedBoard, setCompletedBoard) {\n  if (JSON.stringify(tiles) === JSON.stringify(completedBoard)) {\n    setTimeout(function () {\n      alert(\"Well Done!\");\n    }, 260); //Activates too early if there isnt a delay\n\n    setCompletedBoard([]);\n  }\n};\n\nvar moveRow = function moveRow(w, tiles, row, dir) {\n  //dir 1 = move row right, -1 = move row left\n  var rowTiles = [];\n  var rowTiles0 = [];\n\n  for (var i = 0; i < tiles.length; i++) {\n    if (tiles[i].row === row) {\n      rowTiles.push(JSON.parse(JSON.stringify(tiles[i])));\n      rowTiles0.push(JSON.parse(JSON.stringify(tiles[i])));\n    }\n  }\n\n  for (var _i2 = 0; _i2 < rowTiles0.length; _i2++) {\n    rowTiles[((_i2 - dir) % rowTiles0.length + rowTiles0.length) % rowTiles0.length].col = rowTiles0[_i2].col;\n    tiles.splice(rowTiles0[_i2].row * w + rowTiles0[_i2].col, 1, rowTiles[((_i2 - dir) % rowTiles.length + rowTiles.length) % rowTiles.length]);\n  }\n\n  return JSON.parse(JSON.stringify(tiles));\n};\n\nvar moveCol = function moveCol(w, tiles, col, dir) {\n  var colTiles = [];\n  var colTiles0 = [];\n\n  for (var i = 0; i < tiles.length; i++) {\n    if (tiles[i].col === col) {\n      colTiles.push(JSON.parse(JSON.stringify(tiles[i])));\n      colTiles0.push(JSON.parse(JSON.stringify(tiles[i])));\n    }\n  }\n\n  for (var _i3 = 0; _i3 < colTiles0.length; _i3++) {\n    colTiles[((_i3 - dir) % colTiles0.length + colTiles0.length) % colTiles0.length].row = colTiles0[_i3].row;\n    tiles.splice(colTiles0[_i3].row * w + colTiles0[_i3].col, 1, colTiles[((_i3 - dir) % colTiles.length + colTiles.length) % colTiles.length]);\n  }\n\n  return JSON.parse(JSON.stringify(tiles));\n};\n\nvar incWidth = function incWidth(w, setWidth, setTiles, setCompletedBoard) {\n  if (w < 10) {\n    w += 1;\n    setWidth(w);\n    setTiles(initTiles(w));\n    setCompletedBoard([]);\n  }\n};\n\nvar decWidth = function decWidth(w, setWidth, setTiles, setCompletedBoard) {\n  if (w > 3) {\n    w -= 1;\n    setWidth(w);\n    setTiles(initTiles(w));\n    setCompletedBoard([]);\n  }\n};\n\nexport default {\n  getTileFromId: getTileFromId,\n  packageTiles: packageTiles,\n  getVisualPosition: getVisualPosition,\n  randInt: randInt,\n  initTiles: initTiles,\n  shuffleTiles: shuffleTiles,\n  checkIfComplete: checkIfComplete,\n  moveRow: moveRow,\n  moveCol: moveCol,\n  incWidth: incWidth,\n  decWidth: decWidth\n};","map":{"version":3,"sources":["C:/Users/Aryan Chawla/QWEB/frontend/src/helpers.js"],"names":["getTileFromId","id","tiles","i","length","console","log","packageTiles","width","tileIds","map","tile","packagedTiles","row","push","col","getVisualPosition","tileWidth","x","y","randInt","min","max","Math","floor","random","initTiles","w","newTiles","text","String","fromCharCode","shuffleTiles","setCompletedBoard","setTiles","moveRow","moveCol","checkIfComplete","completedBoard","JSON","stringify","setTimeout","alert","dir","rowTiles","rowTiles0","parse","splice","colTiles","colTiles0","incWidth","setWidth","decWidth"],"mappings":"AAAA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,EAAD,EAAKC,KAAL,EAAe;AACjC,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACD,KAAK,CAACE,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjC,QAAID,KAAK,CAACC,CAAD,CAAL,CAASF,EAAT,KAAgBA,EAApB,EAAwB;AACtB,aAAOC,KAAK,CAACC,CAAC,GAAC,CAAH,CAAZ;AACD;AACF;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACD,CAPH;;AAUA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACL,KAAD,EAAQM,KAAR,EAAkB;AACnC;AACA,MAAMC,OAAO,GAAGP,KAAK,CAACQ,GAAN,CAAU,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACV,EAAf;AAAA,GAAV,CAAhB;AACA,MAAIW,aAAa,GAAG,EAApB;;AACA,OAAK,IAAIC,GAAG,GAAC,CAAb,EAAgBA,GAAG,GAACL,KAApB,EAA2BK,GAAG,EAA9B,EAAkC;AAChCD,IAAAA,aAAa,CAACE,IAAd,CAAmB,EAAnB;;AACA,SAAK,IAAIC,GAAG,GAAC,CAAb,EAAgBA,GAAG,GAACP,KAApB,EAA2BO,GAAG,EAA9B,EAAkC;AAChCH,MAAAA,aAAa,CAACC,GAAD,CAAb,CAAmBC,IAAnB,CAAwBL,OAAO,CAACI,GAAG,GAACL,KAAJ,GAAYO,GAAb,CAA/B;AACD;AACF;;AACD,SAAOH,aAAP;AACD,CAXH;;AAaA,IAAMI,iBAAiB,GAAG,SAApBA,iBAAoB,CAACL,IAAD,EAAOM,SAAP,EAAqB;AAC7C,SAAO;AACLC,IAAAA,CAAC,EAAEP,IAAI,CAACI,GAAL,GAAWE,SADT;AAELE,IAAAA,CAAC,EAAER,IAAI,CAACE,GAAL,GAAWI;AAFT,GAAP;AAID,CALD;;AAOA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC5B;AACD,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAG,CAAN,GAAUD,GAA3B,CAAX,IAA8CA,GAArD;AACA,CAHD;;AAKA,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAACC,CAAD,EAAO;AACvB,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,YAAGwB,CAAH,EAAQ,CAAR,CAAjB,EAA4BxB,CAAC,EAA7B,EAAiC;AAC/ByB,IAAAA,QAAQ,CAACd,IAAT,CACE;AACEb,MAAAA,EAAE,EAAEE,CAAC,GAAG,CADV;AAEEU,MAAAA,GAAG,EAAEU,IAAI,CAACC,KAAL,CAAWrB,CAAC,GAAGwB,CAAf,CAFP;AAE0B;AACxBZ,MAAAA,GAAG,EAAEZ,CAAC,GAAGwB;AAHX,KADF;AAOD;;AACD,OAAK,IAAIxB,EAAC,GAAG,CAAb,EAAgBA,EAAC,YAAGwB,CAAH,EAAQ,CAAR,CAAjB,EAA4BxB,EAAC,EAA7B,EAAiC;AAC/B,QAAIwB,CAAC,IAAI,CAAT,EAAY;AACVC,MAAAA,QAAQ,CAACzB,EAAD,CAAR,CAAY0B,IAAZ,GAAmBC,MAAM,CAACC,YAAP,CAAoB,KAAK5B,EAAzB,CAAnB;AACD,KAFD,MAGK;AACHyB,MAAAA,QAAQ,CAACzB,EAAD,CAAR,CAAY0B,IAAZ,GAAmB1B,EAAC,GAAG,CAAvB;AACD;AACF;;AACD,SAAOyB,QAAP;AACD,CApBD;;AAsBA,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACL,CAAD,EAAIM,iBAAJ,EAAuBC,QAAvB,EAAoC;AACvD,MAAIN,QAAQ,GAAGF,SAAS,CAACC,CAAD,CAAxB;;AACA,OAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3ByB,IAAAA,QAAQ,GAAGO,OAAO,CAACR,CAAD,EAAIC,QAAJ,EAAcR,OAAO,CAAC,CAAD,EAAIO,CAAC,GAAC,CAAN,CAArB,EAA+BP,OAAO,CAAC,CAAD,EAAG,CAAH,CAAtC,CAAlB;AACAQ,IAAAA,QAAQ,GAAGQ,OAAO,CAACT,CAAD,EAAIC,QAAJ,EAAcR,OAAO,CAAC,CAAD,EAAIO,CAAC,GAAC,CAAN,CAArB,EAA+BP,OAAO,CAAC,CAAD,EAAG,CAAH,CAAtC,CAAlB;AACD;;AACDa,EAAAA,iBAAiB,CAACP,SAAS,CAACC,CAAD,CAAV,CAAjB;AACAO,EAAAA,QAAQ,CAACN,QAAD,CAAR;AACD,CARD;;AAUA,IAAMS,eAAe,GAAG,SAAlBA,eAAkB,CAACnC,KAAD,EAAQoC,cAAR,EAAwBL,iBAAxB,EAA8C;AACpE,MAAIM,IAAI,CAACC,SAAL,CAAetC,KAAf,MAA0BqC,IAAI,CAACC,SAAL,CAAeF,cAAf,CAA9B,EAA8D;AAC5DG,IAAAA,UAAU,CAAC,YAAY;AAAEC,MAAAA,KAAK,CAAC,YAAD,CAAL;AAAqB,KAApC,EAAsC,GAAtC,CAAV,CAD4D,CACN;;AACtDT,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD;AACF,CALD;;AAOA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACR,CAAD,EAAIzB,KAAJ,EAAWW,GAAX,EAAgB8B,GAAhB,EAAwB;AAAE;AACxC,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAID,KAAK,CAACC,CAAD,CAAL,CAASU,GAAT,KAAiBA,GAArB,EAA0B;AACxB+B,MAAAA,QAAQ,CAAC9B,IAAT,CAAcyB,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACC,SAAL,CAAetC,KAAK,CAACC,CAAD,CAApB,CAAX,CAAd;AACA0C,MAAAA,SAAS,CAAC/B,IAAV,CAAeyB,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACC,SAAL,CAAetC,KAAK,CAACC,CAAD,CAApB,CAAX,CAAf;AACD;AACF;;AACD,OAAK,IAAIA,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG0C,SAAS,CAACzC,MAA9B,EAAsCD,GAAC,EAAvC,EAA2C;AACzCyC,IAAAA,QAAQ,CAAC,CAAE,CAACzC,GAAC,GAAGwC,GAAL,IAAYE,SAAS,CAACzC,MAAvB,GAAiCyC,SAAS,CAACzC,MAA5C,IAAsDyC,SAAS,CAACzC,MAAjE,CAAR,CAAiFW,GAAjF,GAAuF8B,SAAS,CAAC1C,GAAD,CAAT,CAAaY,GAApG;AACAb,IAAAA,KAAK,CAAC6C,MAAN,CAAaF,SAAS,CAAC1C,GAAD,CAAT,CAAaU,GAAb,GAAmBc,CAAnB,GAAuBkB,SAAS,CAAC1C,GAAD,CAAT,CAAaY,GAAjD,EAAsD,CAAtD,EAAyD6B,QAAQ,CAAC,CAAE,CAACzC,GAAC,GAAGwC,GAAL,IAAYC,QAAQ,CAACxC,MAAtB,GAAgCwC,QAAQ,CAACxC,MAA1C,IAAoDwC,QAAQ,CAACxC,MAA9D,CAAjE;AACD;;AACD,SAAOmC,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACC,SAAL,CAAetC,KAAf,CAAX,CAAP;AACD,CAdD;;AAgBA,IAAMkC,OAAO,GAAG,SAAVA,OAAU,CAACT,CAAD,EAAIzB,KAAJ,EAAWa,GAAX,EAAgB4B,GAAhB,EAAwB;AACtC,MAAIK,QAAQ,GAAG,EAAf;AACA,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAK,IAAI9C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAID,KAAK,CAACC,CAAD,CAAL,CAASY,GAAT,KAAiBA,GAArB,EAA0B;AACxBiC,MAAAA,QAAQ,CAAClC,IAAT,CAAcyB,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACC,SAAL,CAAetC,KAAK,CAACC,CAAD,CAApB,CAAX,CAAd;AACA8C,MAAAA,SAAS,CAACnC,IAAV,CAAeyB,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACC,SAAL,CAAetC,KAAK,CAACC,CAAD,CAApB,CAAX,CAAf;AACD;AACF;;AACD,OAAK,IAAIA,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG8C,SAAS,CAAC7C,MAA9B,EAAsCD,GAAC,EAAvC,EAA2C;AACzC6C,IAAAA,QAAQ,CAAC,CAAE,CAAC7C,GAAC,GAAGwC,GAAL,IAAYM,SAAS,CAAC7C,MAAvB,GAAiC6C,SAAS,CAAC7C,MAA5C,IAAsD6C,SAAS,CAAC7C,MAAjE,CAAR,CAAiFS,GAAjF,GAAuFoC,SAAS,CAAC9C,GAAD,CAAT,CAAaU,GAApG;AACAX,IAAAA,KAAK,CAAC6C,MAAN,CAAaE,SAAS,CAAC9C,GAAD,CAAT,CAAaU,GAAb,GAAmBc,CAAnB,GAAuBsB,SAAS,CAAC9C,GAAD,CAAT,CAAaY,GAAjD,EAAsD,CAAtD,EAAyDiC,QAAQ,CAAC,CAAE,CAAC7C,GAAC,GAAGwC,GAAL,IAAYK,QAAQ,CAAC5C,MAAtB,GAAgC4C,QAAQ,CAAC5C,MAA1C,IAAoD4C,QAAQ,CAAC5C,MAA9D,CAAjE;AACD;;AACD,SAAOmC,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACC,SAAL,CAAetC,KAAf,CAAX,CAAP;AACD,CAdD;;AAgBA,IAAMgD,QAAQ,GAAG,SAAXA,QAAW,CAACvB,CAAD,EAAIwB,QAAJ,EAAcjB,QAAd,EAAwBD,iBAAxB,EAA8C;AAC7D,MAAIN,CAAC,GAAG,EAAR,EAAY;AACVA,IAAAA,CAAC,IAAI,CAAL;AACAwB,IAAAA,QAAQ,CAACxB,CAAD,CAAR;AACAO,IAAAA,QAAQ,CAACR,SAAS,CAACC,CAAD,CAAV,CAAR;AACAM,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD;AACF,CAPD;;AASA,IAAMmB,QAAQ,GAAG,SAAXA,QAAW,CAACzB,CAAD,EAAIwB,QAAJ,EAAcjB,QAAd,EAAwBD,iBAAxB,EAA8C;AAC7D,MAAIN,CAAC,GAAG,CAAR,EAAW;AACTA,IAAAA,CAAC,IAAI,CAAL;AACAwB,IAAAA,QAAQ,CAACxB,CAAD,CAAR;AACAO,IAAAA,QAAQ,CAACR,SAAS,CAACC,CAAD,CAAV,CAAR;AACAM,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD;AACF,CAPD;;AASA,eAAe;AACbjC,EAAAA,aAAa,EAAbA,aADa;AACEO,EAAAA,YAAY,EAAZA,YADF;AACgBS,EAAAA,iBAAiB,EAAjBA,iBADhB;AAEbI,EAAAA,OAAO,EAAPA,OAFa;AAELM,EAAAA,SAAS,EAATA,SAFK;AAEMM,EAAAA,YAAY,EAAZA,YAFN;AAEoBK,EAAAA,eAAe,EAAfA,eAFpB;AAGbF,EAAAA,OAAO,EAAPA,OAHa;AAGJC,EAAAA,OAAO,EAAPA,OAHI;AAGKc,EAAAA,QAAQ,EAARA,QAHL;AAGeE,EAAAA,QAAQ,EAARA;AAHf,CAAf","sourcesContent":["const getTileFromId = (id, tiles) => {\r\n    for (let i=0; i<tiles.length; i++) {\r\n      if (tiles[i].id === id) {\r\n        return tiles[i-1]\r\n      }\r\n    }\r\n    console.log(\"[!] getTileFromId - no element found\")\r\n  }\r\n\r\n\r\nconst packageTiles = (tiles, width) => {\r\n    // Cleans up tiles array for use in the the backend (2D Array of ids)\r\n    const tileIds = tiles.map((tile) => tile.id)\r\n    let packagedTiles = []\r\n    for (let row=0; row<width; row++) {\r\n      packagedTiles.push([])\r\n      for (let col=0; col<width; col++) {\r\n        packagedTiles[row].push(tileIds[row*width + col])\r\n      }\r\n    }\r\n    return packagedTiles\r\n  }\r\n\r\nconst getVisualPosition = (tile, tileWidth) => {\r\n  return {\r\n    x: tile.col * tileWidth,\r\n    y: tile.row * tileWidth\r\n  }\r\n}\r\n\r\nconst randInt = (min, max) => {\r\n  //Random integer from min to max (inclusive)\r\n\treturn Math.floor(Math.random() * (max + 1 - min)) + min;\r\n}\r\n\r\nconst initTiles = (w) => {\r\n  let newTiles = []\r\n  for (let i = 0; i < w ** 2; i++) {\r\n    newTiles.push(\r\n      {\r\n        id: i + 1,\r\n        row: Math.floor(i / w), // Position in array\r\n        col: i % w,\r\n      }\r\n    )\r\n  }\r\n  for (let i = 0; i < w ** 2; i++) {\r\n    if (w <= 5) {\r\n      newTiles[i].text = String.fromCharCode(65 + i)\r\n    }\r\n    else {\r\n      newTiles[i].text = i + 1\r\n    }\r\n  }\r\n  return newTiles\r\n}\r\n\r\nconst shuffleTiles = (w, setCompletedBoard, setTiles) => {\r\n  let newTiles = initTiles(w)\r\n  for (let i = 0; i < 75; i++) {\r\n    newTiles = moveRow(w, newTiles, randInt(0, w-1), randInt(0,1))\r\n    newTiles = moveCol(w, newTiles, randInt(0, w-1), randInt(0,1))\r\n  }\r\n  setCompletedBoard(initTiles(w))\r\n  setTiles(newTiles)\r\n}\r\n\r\nconst checkIfComplete = (tiles, completedBoard, setCompletedBoard) => {\r\n  if (JSON.stringify(tiles) === JSON.stringify(completedBoard)) {\r\n    setTimeout(function () { alert(\"Well Done!\") }, 260); //Activates too early if there isnt a delay\r\n    setCompletedBoard([])\r\n  }\r\n}\r\n\r\nconst moveRow = (w, tiles, row, dir) => { //dir 1 = move row right, -1 = move row left\r\n  let rowTiles = []\r\n  let rowTiles0 = []\r\n  for (let i = 0; i < tiles.length; i++) {\r\n    if (tiles[i].row === row) {\r\n      rowTiles.push(JSON.parse(JSON.stringify(tiles[i])))\r\n      rowTiles0.push(JSON.parse(JSON.stringify(tiles[i])))\r\n    }\r\n  }\r\n  for (let i = 0; i < rowTiles0.length; i++) {\r\n    rowTiles[(((i - dir) % rowTiles0.length) + rowTiles0.length) % rowTiles0.length].col = rowTiles0[i].col\r\n    tiles.splice(rowTiles0[i].row * w + rowTiles0[i].col, 1, rowTiles[(((i - dir) % rowTiles.length) + rowTiles.length) % rowTiles.length]);\r\n  }\r\n  return JSON.parse(JSON.stringify(tiles))\r\n}\r\n\r\nconst moveCol = (w, tiles, col, dir) => {\r\n  let colTiles = []\r\n  let colTiles0 = []\r\n  for (let i = 0; i < tiles.length; i++) {\r\n    if (tiles[i].col === col) {\r\n      colTiles.push(JSON.parse(JSON.stringify(tiles[i])))\r\n      colTiles0.push(JSON.parse(JSON.stringify(tiles[i])))\r\n    }\r\n  }\r\n  for (let i = 0; i < colTiles0.length; i++) {\r\n    colTiles[(((i - dir) % colTiles0.length) + colTiles0.length) % colTiles0.length].row = colTiles0[i].row\r\n    tiles.splice(colTiles0[i].row * w + colTiles0[i].col, 1, colTiles[(((i - dir) % colTiles.length) + colTiles.length) % colTiles.length]);\r\n  }\r\n  return JSON.parse(JSON.stringify(tiles))\r\n}\r\n\r\nconst incWidth = (w, setWidth, setTiles, setCompletedBoard) => {\r\n  if (w < 10) {\r\n    w += 1\r\n    setWidth(w)\r\n    setTiles(initTiles(w))\r\n    setCompletedBoard([])\r\n  }\r\n}\r\n\r\nconst decWidth = (w, setWidth, setTiles, setCompletedBoard) => {\r\n  if (w > 3) {\r\n    w -= 1\r\n    setWidth(w)\r\n    setTiles(initTiles(w))\r\n    setCompletedBoard([])\r\n  }\r\n}\r\n\r\nexport default {\r\n  getTileFromId, packageTiles, getVisualPosition,\r\n  randInt,initTiles, shuffleTiles, checkIfComplete,\r\n  moveRow, moveCol, incWidth, decWidth\r\n}\r\n"]},"metadata":{},"sourceType":"module"}