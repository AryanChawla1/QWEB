{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aryan Chawla\\\\QWEB\\\\frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n//Todo:\n//Move Board functions to Board.js\n//Have tile sliding be continuous instead of one move at a time\n//Change shuffle function so that it can't generate unsolvable boards\nimport { useState } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const boardWidth = 500;\n  let [width, setWidth] = useState(3); //width in tiles\n\n  let [completedBoard, setCompletedBoard] = useState([]);\n\n  const initTiles = w => {\n    let newTiles = [];\n\n    for (let i = 0; i < w ** 2; i++) {\n      newTiles.push({\n        id: i + 1,\n        row: Math.floor(i / w),\n        // Position in array\n        col: i % w\n      });\n    }\n\n    for (let i = 0; i < w ** 2; i++) {\n      if (w <= 5) {\n        newTiles[i].text = String.fromCharCode(65 + i);\n      } else {\n        newTiles[i].text = i + 1;\n      }\n    }\n\n    return newTiles;\n  };\n\n  const [tiles, setTiles] = useState(() => initTiles(width));\n\n  const incWidth = () => {\n    if (width < 10) {\n      width += 1;\n      setWidth(width);\n      setTiles(initTiles(width));\n      setCompletedBoard([]);\n    }\n  };\n\n  const decWidth = () => {\n    if (width > 3) {\n      width -= 1;\n      setWidth(width);\n      setTiles(initTiles(width));\n      setCompletedBoard([]);\n    }\n  };\n\n  const moveRow = (tiles, row, dir) => {\n    //dir 1 = move row right, -1 = move row left\n    let rowTiles = [];\n    let rowTiles0 = [];\n\n    for (let i = 0; i < tiles.length; i++) {\n      if (tiles[i].row === row) {\n        rowTiles.push(JSON.parse(JSON.stringify(tiles[i])));\n        rowTiles0.push(JSON.parse(JSON.stringify(tiles[i])));\n      }\n    }\n\n    for (let i = 0; i < rowTiles0.length; i++) {\n      rowTiles[((i - dir) % rowTiles0.length + rowTiles0.length) % rowTiles0.length].col = rowTiles0[i].col;\n      tiles.splice(rowTiles0[i].row * width + rowTiles0[i].col, 1, rowTiles[((i - dir) % rowTiles.length + rowTiles.length) % rowTiles.length]);\n    }\n\n    setTiles(JSON.parse(JSON.stringify(tiles)));\n  };\n\n  const moveCol = (tiles, col, dir) => {\n    let colTiles = [];\n    let colTiles0 = [];\n\n    for (let i = 0; i < tiles.length; i++) {\n      if (tiles[i].col === col) {\n        colTiles.push(JSON.parse(JSON.stringify(tiles[i])));\n        colTiles0.push(JSON.parse(JSON.stringify(tiles[i])));\n      }\n    }\n\n    for (let i = 0; i < colTiles0.length; i++) {\n      colTiles[((i - dir) % colTiles0.length + colTiles0.length) % colTiles0.length].row = colTiles0[i].row;\n      tiles.splice(colTiles0[i].row * width + colTiles0[i].col, 1, colTiles[((i - dir) % colTiles.length + colTiles.length) % colTiles.length]);\n    }\n\n    setTiles(JSON.parse(JSON.stringify(tiles)));\n  };\n\n  const shuffleTiles = w => {\n    let newTiles = []; //Make array of random indexes\n\n    let range = [];\n\n    for (let i = 0; i < w ** 2; i++) {\n      range[i] = i;\n    }\n\n    let randomIndexes = [];\n\n    for (let i = 0; i < w ** 2; i++) {\n      const randInd = Math.round(Math.random() * (range.length - 1));\n      randomIndexes[i] = range[randInd];\n      range.splice(randInd, 1); //deletes index from range\n    } //Create randomized board\n\n\n    for (let i = 0; i < w ** 2; i++) {\n      newTiles.push({\n        id: randomIndexes[i] + 1,\n        row: Math.floor(i / w),\n        // Position in array\n        col: i % w\n      });\n    }\n\n    for (let i = 0; i < w ** 2; i++) {\n      if (w <= 5) {\n        newTiles[i].text = String.fromCharCode(65 + randomIndexes[i]);\n      } else {\n        newTiles[i].text = randomIndexes[i] + 1;\n      }\n    }\n\n    setCompletedBoard(initTiles(width));\n    setTiles(newTiles);\n  };\n\n  const checkIfComplete = () => {\n    if (JSON.stringify(tiles) === JSON.stringify(completedBoard)) {\n      setTimeout(function () {\n        alert(\"Well Done!\");\n      }, 260); //Activates too early if there isnt a delay\n\n      setCompletedBoard([]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"topbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decWidth,\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), \"  \\u2002\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"gradtext\",\n        children: \"Board Size\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), \"  \\u2002\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incWidth,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), \"\\u2003\\u2003\\u2003\\u2003\\u2003\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"titleText\",\n      children: \"TORUS PUZZLE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttonsMainPage\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button1\",\n        onClick: () => shuffleTiles(width),\n        children: \"Shuffle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button1\",\n        children: \"Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      width: width,\n      tiles: tiles,\n      boardWidth: boardWidth,\n      moveRow: moveRow,\n      moveCol: moveCol,\n      checkIfComplete: checkIfComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"pZFv9DwUeV2Q4P2KxMzJ5C/2DXc=\");\n\n_c = App;\nexport default App; //console.log(JSON.parse(JSON.stringify(object)))\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Aryan Chawla/QWEB/frontend/src/App.js"],"names":["useState","Board","App","boardWidth","width","setWidth","completedBoard","setCompletedBoard","initTiles","w","newTiles","i","push","id","row","Math","floor","col","text","String","fromCharCode","tiles","setTiles","incWidth","decWidth","moveRow","dir","rowTiles","rowTiles0","length","JSON","parse","stringify","splice","moveCol","colTiles","colTiles0","shuffleTiles","range","randomIndexes","randInd","round","random","checkIfComplete","setTimeout","alert"],"mappings":"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","sourcesContent":["//Todo:\r\n//Move Board functions to Board.js\r\n//Have tile sliding be continuous instead of one move at a time\r\n//Change shuffle function so that it can't generate unsolvable boards\r\n\r\n\r\nimport { useState } from 'react';\r\nimport './App.css';\r\nimport Board from './components/Board';\r\n\r\nconst App = () => {\r\n  const boardWidth = 500\r\n  let [width, setWidth] = useState(3) //width in tiles\r\n  let [completedBoard, setCompletedBoard] = useState([])\r\n\r\n  const initTiles = (w) => {\r\n    let newTiles = []\r\n    for (let i = 0; i < w ** 2; i++) {\r\n      newTiles.push(\r\n        {\r\n          id: i + 1,\r\n          row: Math.floor(i / w), // Position in array\r\n          col: i % w,\r\n        }\r\n      )\r\n    }\r\n    for (let i = 0; i < w ** 2; i++) {\r\n      if (w <= 5) {\r\n        newTiles[i].text = String.fromCharCode(65 + i)\r\n      }\r\n      else {\r\n        newTiles[i].text = i + 1\r\n      }\r\n    }\r\n    return newTiles\r\n  }\r\n\r\n  const [tiles, setTiles] = useState(() => initTiles(width))\r\n\r\n  const incWidth = () => {\r\n    if (width < 10) {\r\n      width += 1\r\n      setWidth(width)\r\n      setTiles(initTiles(width))\r\n      setCompletedBoard([])\r\n    }\r\n  }\r\n\r\n  const decWidth = () => {\r\n    if (width > 3) {\r\n      width -= 1\r\n      setWidth(width)\r\n      setTiles(initTiles(width))\r\n      setCompletedBoard([])\r\n    }\r\n  }\r\n\r\n  const moveRow = (tiles, row, dir) => { //dir 1 = move row right, -1 = move row left\r\n    let rowTiles = []\r\n    let rowTiles0 = []\r\n    for (let i = 0; i < tiles.length; i++) {\r\n      if (tiles[i].row === row) {\r\n        rowTiles.push(JSON.parse(JSON.stringify(tiles[i])))\r\n        rowTiles0.push(JSON.parse(JSON.stringify(tiles[i])))\r\n      }\r\n    }\r\n    for (let i = 0; i < rowTiles0.length; i++) {\r\n      rowTiles[(((i - dir) % rowTiles0.length) + rowTiles0.length) % rowTiles0.length].col = rowTiles0[i].col\r\n      tiles.splice(rowTiles0[i].row * width + rowTiles0[i].col, 1, rowTiles[(((i - dir) % rowTiles.length) + rowTiles.length) % rowTiles.length]);\r\n    }\r\n    setTiles(JSON.parse(JSON.stringify(tiles)))\r\n  }\r\n\r\n  const moveCol = (tiles, col, dir) => {\r\n    let colTiles = []\r\n    let colTiles0 = []\r\n    for (let i = 0; i < tiles.length; i++) {\r\n      if (tiles[i].col === col) {\r\n        colTiles.push(JSON.parse(JSON.stringify(tiles[i])))\r\n        colTiles0.push(JSON.parse(JSON.stringify(tiles[i])))\r\n      }\r\n    }\r\n    for (let i = 0; i < colTiles0.length; i++) {\r\n      colTiles[(((i - dir) % colTiles0.length) + colTiles0.length) % colTiles0.length].row = colTiles0[i].row\r\n      tiles.splice(colTiles0[i].row * width + colTiles0[i].col, 1, colTiles[(((i - dir) % colTiles.length) + colTiles.length) % colTiles.length]);\r\n    }\r\n    setTiles(JSON.parse(JSON.stringify(tiles)))\r\n  }\r\n\r\n  const shuffleTiles = (w) => {\r\n    let newTiles = []\r\n\r\n    //Make array of random indexes\r\n    let range = []\r\n    for (let i = 0; i < w ** 2; i++) {\r\n      range[i] = i\r\n    }\r\n    let randomIndexes = []\r\n    for (let i = 0; i < w ** 2; i++) {\r\n      const randInd = Math.round(Math.random() * (range.length - 1))\r\n      randomIndexes[i] = range[randInd]\r\n      range.splice(randInd, 1); //deletes index from range\r\n    }\r\n    //Create randomized board\r\n    for (let i = 0; i < w ** 2; i++) {\r\n      newTiles.push(\r\n        {\r\n          id: randomIndexes[i] + 1,\r\n          row: Math.floor(i / w), // Position in array\r\n          col: i % w,\r\n        }\r\n      )\r\n    }\r\n    for (let i = 0; i < w ** 2; i++) {\r\n      if (w <= 5) {\r\n        newTiles[i].text = String.fromCharCode(65 + randomIndexes[i])\r\n      }\r\n      else {\r\n        newTiles[i].text = randomIndexes[i] + 1\r\n      }\r\n    }\r\n    setCompletedBoard(initTiles(width))\r\n    setTiles(newTiles)\r\n  }\r\n\r\n  const checkIfComplete = () => {\r\n    if (JSON.stringify(tiles) === JSON.stringify(completedBoard)) {\r\n      setTimeout(function () { alert(\"Well Done!\") }, 260); //Activates too early if there isnt a delay\r\n      setCompletedBoard([])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"topbar\">\r\n        <button onClick={decWidth}>-</button>  &ensp;\r\n        <span className=\"gradtext\">Board Size</span>  &ensp;\r\n        <button onClick={incWidth}>+</button>\r\n        &emsp;&emsp;&emsp;&emsp;&emsp;\r\n      </div>\r\n      <div className=\"titleText\">TORUS PUZZLE</div>\r\n      <div className=\"buttonsMainPage\">\r\n        <button className=\"button1\" onClick={() => shuffleTiles(width)}>Shuffle</button>\r\n        <button className=\"button1\">Button</button>\r\n      </div>\r\n      <Board width={width} tiles={tiles} boardWidth={boardWidth} moveRow={moveRow} moveCol={moveCol} checkIfComplete={checkIfComplete} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n//console.log(JSON.parse(JSON.stringify(object)))"]},"metadata":{},"sourceType":"module"}