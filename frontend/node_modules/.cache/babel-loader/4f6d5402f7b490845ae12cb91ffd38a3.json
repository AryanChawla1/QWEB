{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aryan Chawla\\\\QWEB\\\\frontend\\\\src\\\\components\\\\Tiles.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport React from 'react';\nimport Tile from './Tile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tiles = _ref => {\n  _s();\n\n  let {\n    width,\n    tiles,\n    boardWidth,\n    moveRow,\n    moveCol,\n    checkIfComplete\n  } = _ref;\n  const [heldTile, setHeldTile] = useState(null);\n\n  const tileHeld = t => {\n    setHeldTile(t);\n  };\n\n  const tileReleased = t => {\n    setHeldTile(null);\n  };\n\n  const tileMovedOnto = t => {\n    if (heldTile != null) {\n      if (heldTile.row < t.row) {\n        moveCol(tiles, t.col, 1);\n      } else if (heldTile.row > t.row) {\n        moveCol(tiles, t.col, -1);\n      } else if (heldTile.col < t.col) {\n        moveRow(tiles, t.row, 1);\n      } else if (heldTile.col > t.col) {\n        moveRow(tiles, t.row, -1);\n      } else {\n        console.log(\"[!] Error in Tiles/tileMovedOnto\");\n      }\n\n      checkIfComplete();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tiles.map(tile => /*#__PURE__*/_jsxDEV(Tile, {\n      tiles: tiles,\n      width: width,\n      tile: tile,\n      boardWidth: boardWidth,\n      moveRow: moveRow,\n      moveCol: moveCol,\n      tileHeld: tileHeld,\n      tileReleased: tileReleased,\n      tileMovedOnto: tileMovedOnto,\n      checkIfComplete: checkIfComplete\n    }, tile.text, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Tiles, \"Y9loALEQBgHedAVPAR8I88HkAMc=\");\n\n_c = Tiles;\nexport default Tiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tiles\");","map":{"version":3,"sources":["C:/Users/Aryan Chawla/QWEB/frontend/src/components/Tiles.js"],"names":["useState","React","Tile","Tiles","width","tiles","boardWidth","moveRow","moveCol","checkIfComplete","heldTile","setHeldTile","tileHeld","t","tileReleased","tileMovedOnto","row","col","console","log","map","tile","text"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,KAAK,GAAG,QAAqE;AAAA;;AAAA,MAApE;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA,OAA5B;AAAqCC,IAAAA,OAArC;AAA8CC,IAAAA;AAA9C,GAAoE;AACjF,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAxC;;AAEA,QAAMY,QAAQ,GAAIC,CAAD,IAAO;AACtBF,IAAAA,WAAW,CAACE,CAAD,CAAX;AACD,GAFD;;AAGA,QAAMC,YAAY,GAAID,CAAD,IAAO;AAC1BF,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAFD;;AAIA,QAAMI,aAAa,GAAIF,CAAD,IAAO;AAC3B,QAAIH,QAAQ,IAAI,IAAhB,EAAsB;AACpB,UAAIA,QAAQ,CAACM,GAAT,GAAeH,CAAC,CAACG,GAArB,EAA0B;AAAER,QAAAA,OAAO,CAACH,KAAD,EAAQQ,CAAC,CAACI,GAAV,EAAe,CAAf,CAAP;AAA0B,OAAtD,MACK,IAAIP,QAAQ,CAACM,GAAT,GAAeH,CAAC,CAACG,GAArB,EAA0B;AAAER,QAAAA,OAAO,CAACH,KAAD,EAAQQ,CAAC,CAACI,GAAV,EAAe,CAAC,CAAhB,CAAP;AAA2B,OAAvD,MACA,IAAIP,QAAQ,CAACO,GAAT,GAAeJ,CAAC,CAACI,GAArB,EAA0B;AAAEV,QAAAA,OAAO,CAACF,KAAD,EAAQQ,CAAC,CAACG,GAAV,EAAe,CAAf,CAAP;AAA0B,OAAtD,MACA,IAAIN,QAAQ,CAACO,GAAT,GAAeJ,CAAC,CAACI,GAArB,EAA0B;AAAEV,QAAAA,OAAO,CAACF,KAAD,EAAQQ,CAAC,CAACG,GAAV,EAAe,CAAC,CAAhB,CAAP;AAA2B,OAAvD,MACA;AAAEE,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AAAiD;;AACxDV,MAAAA,eAAe;AAChB;AACF,GATD;;AAWA,sBACE;AAAA,cACGJ,KAAK,CAACe,GAAN,CAAWC,IAAD,iBACT,QAAC,IAAD;AAAsB,MAAA,KAAK,EAAEhB,KAA7B;AAAoC,MAAA,KAAK,EAAED,KAA3C;AAAkD,MAAA,IAAI,EAAEiB,IAAxD;AAA8D,MAAA,UAAU,EAAEf,UAA1E;AACE,MAAA,OAAO,EAAEC,OADX;AACoB,MAAA,OAAO,EAAEC,OAD7B;AACsC,MAAA,QAAQ,EAAEI,QADhD;AAC0D,MAAA,YAAY,EAAEE,YADxE;AAEE,MAAA,aAAa,EAAEC,aAFjB;AAEgC,MAAA,eAAe,EAAEN;AAFjD,OAAWY,IAAI,CAACC,IAAhB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA9BD;;GAAMnB,K;;KAAAA,K;AAgCN,eAAeA,KAAf","sourcesContent":["import { useState } from 'react'\nimport React from 'react'\nimport Tile from './Tile'\n\nconst Tiles = ({ width, tiles, boardWidth, moveRow, moveCol, checkIfComplete }) => {\n  const [heldTile, setHeldTile] = useState(null)\n\n  const tileHeld = (t) => {\n    setHeldTile(t)\n  }\n  const tileReleased = (t) => {\n    setHeldTile(null)\n  }\n\n  const tileMovedOnto = (t) => {\n    if (heldTile != null) {\n      if (heldTile.row < t.row) { moveCol(tiles, t.col, 1) }\n      else if (heldTile.row > t.row) { moveCol(tiles, t.col, -1) }\n      else if (heldTile.col < t.col) { moveRow(tiles, t.row, 1) }\n      else if (heldTile.col > t.col) { moveRow(tiles, t.row, -1) }\n      else { console.log(\"[!] Error in Tiles/tileMovedOnto\") }\n      checkIfComplete()\n    }\n  }\n\n  return (\n    <div>\n      {tiles.map((tile) => (\n        <Tile key={tile.text} tiles={tiles} width={width} tile={tile} boardWidth={boardWidth}\n          moveRow={moveRow} moveCol={moveCol} tileHeld={tileHeld} tileReleased={tileReleased}\n          tileMovedOnto={tileMovedOnto} checkIfComplete={checkIfComplete} />\n      ))}\n    </div>\n  )\n}\n\nexport default Tiles"]},"metadata":{},"sourceType":"module"}