{"version":3,"sources":["helpers.js","components/Tile.js","components/Tiles.js","components/Board.js","pages/App.js","reportWebVitals.js","index.js"],"names":["helpers","tile","tileWidth","x","col","y","row","min","max","Math","floor","random","Tile","_ref","width","tiles","boardWidth","tileHeld","tileReleased","tileMovedOnto","visualPos","fontSize","id","motionStyle","translateX","spring","stiffness","damping","translateY","react_default","a","createElement","react_motion","style","_ref2","className","onMouseDown","onMouseUp","onMouseLeave","onMouseEnter","height","transform","concat","text","Tiles","moveRow","moveCol","checkIfComplete","setTiles","_useState","useState","_useState2","Object","slicedToArray","heldTile","setHeldTile","t","console","log","map","components_Tile","key","Board","components_Tiles","App","setWidth","_useState3","_useState4","completedBoard","setCompletedBoard","initTiles","w","newTiles","i","pow","push","String","fromCharCode","_useState5","_useState6","dir","rowTiles","rowTiles0","length","JSON","parse","stringify","splice","colTiles","colTiles0","onClick","shuffleTiles","components_Board","setTimeout","alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","pages_App","document","getElementById"],"mappings":"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","file":"static/js/main.48ef329e.chunk.js","sourcesContent":["const getTileFromId = (id, tiles) => {\r\n    for (let i=0; i<tiles.length; i++) {\r\n      if (tiles[i].id === id) {\r\n        return tiles[i-1]\r\n      }\r\n    }\r\n    console.log(\"[!] getTileFromId - no element found\")\r\n  }\r\n\r\n\r\nconst packageTiles = (tiles, width) => {\r\n    // Cleans up tiles array for use in the the backend (2D Array of ids)\r\n    const tileIds = tiles.map((tile) => tile.id)\r\n    let packagedTiles = []\r\n    for (let row=0; row<width; row++) {\r\n      packagedTiles.push([])\r\n      for (let col=0; col<width; col++) {\r\n        packagedTiles[row].push(tileIds[row*width + col])\r\n      }\r\n    }\r\n    return packagedTiles\r\n  }\r\n\r\nconst getVisualPosition = (tile, tileWidth) => {\r\n  return {\r\n    x: tile.col * tileWidth,\r\n    y: tile.row * tileWidth\r\n  }\r\n}\r\n\r\nconst randInt = (min, max) => {\r\n  //Random integer from min to max (inclusive)\r\n\treturn Math.floor(Math.random() * (max + 1 - min)) + min;\r\n}\r\n\r\n\r\nexport default {getTileFromId, packageTiles, getVisualPosition, randInt}\r\n","import React from 'react'\r\nimport { Motion, spring } from \"react-motion\"\r\nimport helpers from '../helpers'\r\n\r\nconst Tile = ({ width, tiles, tile, boardWidth, tileHeld, tileReleased, tileMovedOnto }) => {\r\n  const tileWidth = boardWidth / width\r\n  const visualPos = helpers.getVisualPosition(tile, tileWidth)\r\n  const fontSize = ((tile.id < 100) ? tileWidth * 0.6 : tileWidth * 0.55) //Allows 3 digit numbers to fit in box (e.g. 100)\r\n  const motionStyle = {\r\n    translateX: spring(visualPos.x, { stiffness: 800, damping: 50 }),\r\n    translateY: spring(visualPos.y, { stiffness: 800, damping: 50 })\r\n  }\r\n\r\n  return (\r\n    <Motion style={motionStyle}>\r\n      {({ translateX, translateY }) => (\r\n        <button className=\"tile\" onMouseDown={() => tileHeld(tile)} onMouseUp={() => tileReleased(tile)}\r\n        onMouseLeave={() => tileReleased(tile)} onMouseEnter={() => tileMovedOnto(tile)}\r\n        style={{\r\n          width: tileWidth,\r\n          height: tileWidth,\r\n          transform: `translate3d(${translateX}px, ${translateY}px, 0)`,\r\n          }}>\r\n          <div className=\"tileOuter\"\r\n          style={{\r\n            width: tileWidth,\r\n            height: tileWidth,\r\n            }}>\r\n          </div>\r\n          <div className=\"tileInner\"\r\n            style={{\r\n              width: tileWidth*0.95,\r\n              height: tileWidth*0.95,\r\n              fontSize: fontSize,\r\n              // backgroundColor: \"rgba(\" + (255 / (width)) * (width - ((tile.id - 1) % width)) + \",\" + (220 / (width - 1)) * Math.floor((tile.id - 1) / width) + \",\" + (220 / (width - 1)) * ((tile.id - 1) % width) + \",\" + 0.8 +\")\",\r\n            }}>\r\n            {tile.text}\r\n          </div>\r\n        </button>\r\n      )}\r\n    </Motion>\r\n  )\r\n}\r\n\r\nexport default Tile","import { useState } from 'react'\r\nimport React from 'react'\r\nimport Tile from './Tile'\r\n\r\nconst Tiles = ({ width, tiles, boardWidth, moveRow, moveCol, checkIfComplete, setTiles }) => {\r\n  const [heldTile, setHeldTile] = useState(null)\r\n\r\n  const tileHeld = (t) => {\r\n    setHeldTile(t)\r\n  }\r\n  const tileReleased = (t) => {\r\n    setHeldTile(null)\r\n  }\r\n\r\n  const tileMovedOnto = (t) => {\r\n    if (heldTile != null) {\r\n      if (heldTile.row < t.row) { moveCol(tiles, t.col, 1) }\r\n      else if (heldTile.row > t.row) { setTiles(moveCol(tiles, t.col, -1)) }\r\n      else if (heldTile.col < t.col) { setTiles(moveRow(tiles, t.row, 1)) }\r\n      else if (heldTile.col > t.col) { setTiles(moveRow(tiles, t.row, -1)) }\r\n      else { console.log(\"[!] Error in Tiles/tileMovedOnto\") }\r\n      checkIfComplete()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {tiles.map((tile) => (\r\n        <Tile key={tile.text} tiles={tiles} width={width} tile={tile} boardWidth={boardWidth}\r\n          moveRow={moveRow} moveCol={moveCol} tileHeld={tileHeld} tileReleased={tileReleased}\r\n          tileMovedOnto={tileMovedOnto} checkIfComplete={checkIfComplete} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tiles","import React from 'react'\r\nimport Tiles from './Tiles'\r\n\r\nconst Board = ({width, tiles, boardWidth, moveRow, moveCol, checkIfComplete, setTiles}) => {\r\n  return (   \r\n    <div className=\"board\" style={{width: boardWidth, height: boardWidth}}>\r\n        <Tiles width={width} tiles={tiles} boardWidth={boardWidth} moveRow={moveRow} moveCol={moveCol}\r\n          checkIfComplete={checkIfComplete} setTiles={setTiles}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Board","//Todo:\r\n//Move Board functions to Board.js\r\n//Have tile sliding be continuous instead of one move at a time\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport '../styles/App.css';\r\nimport Board from '../components/Board';\r\nimport helpers from '../helpers';\r\n\r\nconst App = () => {\r\n  const boardWidth = 500\r\n  let [width, setWidth] = useState(3) //width in tiles\r\n  let [completedBoard, setCompletedBoard] = useState([])\r\n\r\n  const initTiles = (w) => {\r\n    let newTiles = []\r\n    for (let i = 0; i < w ** 2; i++) {\r\n      newTiles.push(\r\n        {\r\n          id: i + 1,\r\n          row: Math.floor(i / w), // Position in array\r\n          col: i % w,\r\n        }\r\n      )\r\n    }\r\n    for (let i = 0; i < w ** 2; i++) {\r\n      if (w <= 5) {\r\n        newTiles[i].text = String.fromCharCode(65 + i)\r\n      }\r\n      else {\r\n        newTiles[i].text = i + 1\r\n      }\r\n    }\r\n    return newTiles\r\n  }\r\n\r\n  const [tiles, setTiles] = useState(() => initTiles(width))\r\n\r\n  const incWidth = () => {\r\n    if (width < 10) {\r\n      width += 1\r\n      setWidth(width)\r\n      setTiles(initTiles(width))\r\n      setCompletedBoard([])\r\n    }\r\n  }\r\n\r\n  const decWidth = () => {\r\n    if (width > 3) {\r\n      width -= 1\r\n      setWidth(width)\r\n      setTiles(initTiles(width))\r\n      setCompletedBoard([])\r\n    }\r\n  }\r\n\r\n  const moveRow = (tiles, row, dir) => { //dir 1 = move row right, -1 = move row left\r\n    let rowTiles = []\r\n    let rowTiles0 = []\r\n    for (let i = 0; i < tiles.length; i++) {\r\n      if (tiles[i].row === row) {\r\n        rowTiles.push(JSON.parse(JSON.stringify(tiles[i])))\r\n        rowTiles0.push(JSON.parse(JSON.stringify(tiles[i])))\r\n      }\r\n    }\r\n    for (let i = 0; i < rowTiles0.length; i++) {\r\n      rowTiles[(((i - dir) % rowTiles0.length) + rowTiles0.length) % rowTiles0.length].col = rowTiles0[i].col\r\n      tiles.splice(rowTiles0[i].row * width + rowTiles0[i].col, 1, rowTiles[(((i - dir) % rowTiles.length) + rowTiles.length) % rowTiles.length]);\r\n    }\r\n    return JSON.parse(JSON.stringify(tiles))\r\n  }\r\n\r\n  const moveCol = (tiles, col, dir) => {\r\n    let colTiles = []\r\n    let colTiles0 = []\r\n    for (let i = 0; i < tiles.length; i++) {\r\n      if (tiles[i].col === col) {\r\n        colTiles.push(JSON.parse(JSON.stringify(tiles[i])))\r\n        colTiles0.push(JSON.parse(JSON.stringify(tiles[i])))\r\n      }\r\n    }\r\n    for (let i = 0; i < colTiles0.length; i++) {\r\n      colTiles[(((i - dir) % colTiles0.length) + colTiles0.length) % colTiles0.length].row = colTiles0[i].row\r\n      tiles.splice(colTiles0[i].row * width + colTiles0[i].col, 1, colTiles[(((i - dir) % colTiles.length) + colTiles.length) % colTiles.length]);\r\n    }\r\n    return JSON.parse(JSON.stringify(tiles))\r\n  }\r\n\r\n  const shuffleTiles = (w) => {\r\n    let newTiles = initTiles(w)\r\n    for (let i = 0; i < 75; i++) {\r\n      newTiles = moveRow(newTiles, helpers.randInt(0, w-1), helpers.randInt(0,1))\r\n      newTiles = moveCol(newTiles, helpers.randInt(0, w-1), helpers.randInt(0,1))\r\n    }\r\n\r\n    setCompletedBoard(initTiles(w))\r\n    setTiles(newTiles)\r\n  }\r\n\r\n  const checkIfComplete = () => {\r\n    if (JSON.stringify(tiles) === JSON.stringify(completedBoard)) {\r\n      setTimeout(function () { alert(\"Well Done!\") }, 260); //Activates too early if there isnt a delay\r\n      setCompletedBoard([])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"topbar\">\r\n        <button onClick={decWidth}>-</button>  &ensp;\r\n        <span className=\"gradtext\">Board Size</span>  &ensp;\r\n        <button onClick={incWidth}>+</button>\r\n        &emsp;&emsp;&emsp;&emsp;&emsp;\r\n      </div>\r\n      <div className=\"titleText\">TORUS PUZZLE</div>\r\n      <div className=\"buttonsMainPage\">\r\n        <button className=\"button1\" onClick={() => shuffleTiles(width)}>Shuffle</button>\r\n        <button className=\"button1\">Button</button>\r\n      </div>\r\n      <Board width={width} tiles={tiles} boardWidth={boardWidth} moveRow={moveRow} moveCol={moveCol}\r\n        checkIfComplete={checkIfComplete} setTiles={setTiles} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n//console.log(JSON.parse(JSON.stringify(object)))","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './pages/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}